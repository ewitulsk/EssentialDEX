storage {
    reserve_usdc: int,  // Reserves for USDC
    reserve_ess: int,   // Reserves for Ess Coin
    total_supply_lp: int,  // Total LP tokens issued
    lp_balances: (b256 => int),  // LP token balances per user
}

predicate AddLiquidity {
    var provider: b256;
    var amount_usdc: int;
    var amount_ess: int;

    state reserve_usdc = mut storage::reserve_usdc;
    state reserve_ess = mut storage::reserve_ess;
    state provider_lp_balance = mut storage::lp_balances[provider];
    state total_supply_lp = mut storage::total_supply_lp;

    // Calculate liquidity to mint
    const MINIMUM_LIQUIDITY: int = 1000;  // Define an appropriate minimum

    var mint_lp = cond {
        total_supply_lp == 0 => sqrt(amount_usdc * amount_ess) - MINIMUM_LIQUIDITY,
        else => min((amount_usdc / (amount_usdc + reserve_usdc) * (total_supply_lp +amount_usdc) , 
                    (amount_ess / (amount_ess + reserve_ess) * (total_supply_lp +amount_ess))
    };

    // Update the reserves
    constraint reserve_usdc' == reserve_usdc + amount_usdc;
    constraint reserve_ess' == reserve_ess + amount_ess;

    // Mint LP tokens
    constraint total_supply_lp' == total_supply_lp + mint_lp;
    constraint provider_lp_balance' == provider_lp_balance + mint_lp;
}

predicate RemoveLiquidity {
    var provider: b256;
    var lp_amount: int;

    state reserve_usdc = mut storage::reserve_usdc;
    state reserve_ess = mut storage::reserve_ess;
    state provider_lp_balance = mut storage::lp_balances[provider];
    state total_supply_lp = mut storage::total_supply_lp;

    // Ensure the provider has enough LP tokens
    constraint lp_amount <= provider_lp_balance;

    // Calculate the amounts of USDC and Ess Coin to be withdrawn
    var withdraw_usdc: int = lp_amount * reserve_usdc / total_supply_lp;
    var withdraw_ess: int = lp_amount * reserve_ess / total_supply_lp;

    // Update the reserves
    constraint reserve_usdc' == reserve_usdc - withdraw_usdc;
    constraint reserve_ess' == reserve_ess - withdraw_ess;

    // Burn LP tokens
    constraint total_supply_lp' == total_supply_lp - lp_amount;
    constraint provider_lp_balance' == provider_lp_balance - lp_amount;
}
